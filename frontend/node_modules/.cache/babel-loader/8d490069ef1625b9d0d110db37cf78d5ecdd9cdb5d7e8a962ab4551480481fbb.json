{"ast":null,"code":"var _jsxFileName = \"/Users/sumitdhaker/Desktop/Alumni_Portal_JNVChittorgarh/frontend/src/pages/PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport postService from '../services/postService';\nimport PostCard from '../components/posts/PostCard';\nimport Spinner from '../components/common/Spinner';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const res = await postService.getPostById(id);\n        setPost(res.data.data);\n      } catch (error) {\n        var _error$response;\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n          toast.error(\"Post not found. It may have been deleted.\");\n        } else {\n          toast.error(\"Could not load the post. Please try again.\");\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (id) {\n      fetchPost();\n    }\n  }, [id]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-20\",\n    children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 25\n  }, this);\n  if (!post) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center py-20 text-muted\",\n    children: \"Post not found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 sm:px-6 lg:px-8 max-w-2xl\",\n    children: /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post,\n      refreshFeed: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(PostPage, \"taoQDP9sD2hseJdPcOb/ybygNeI=\", false, function () {\n  return [useParams];\n});\n_c = PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","postService","PostCard","Spinner","toast","jsxDEV","_jsxDEV","PostPage","_s","id","post","setPost","loading","setLoading","fetchPost","res","getPostById","data","error","_error$response","response","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","refreshFeed","_c","$RefreshReg$"],"sources":["/Users/sumitdhaker/Desktop/Alumni_Portal_JNVChittorgarh/frontend/src/pages/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport postService from '../services/postService';\nimport PostCard from '../components/posts/PostCard';\nimport Spinner from '../components/common/Spinner';\nimport toast from 'react-hot-toast';\n\nexport default function PostPage() {\n    const { id } = useParams();\n    const [post, setPost] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchPost = async () => {\n            try {\n                const res = await postService.getPostById(id);\n                setPost(res.data.data);\n            } catch (error) {\n                if (error.response?.status === 404) {\n                    toast.error(\"Post not found. It may have been deleted.\");\n                } else {\n                    toast.error(\"Could not load the post. Please try again.\");\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n        \n        if (id) {\n            fetchPost();\n        }\n    }, [id]);\n\n    if (loading) return <div className=\"py-20\"><Spinner /></div>;\n    if (!post) return <div className=\"text-center py-20 text-muted\">Post not found.</div>;\n\n    return (\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-2xl\">\n            <PostCard post={post} refreshFeed={() => { }} />\n        </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,GAAG,GAAG,MAAMd,WAAW,CAACe,WAAW,CAACP,EAAE,CAAC;QAC7CE,OAAO,CAACI,GAAG,CAACE,IAAI,CAACA,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QAAA,IAAAC,eAAA;QACZ,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACE,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;UAChCjB,KAAK,CAACc,KAAK,CAAC,2CAA2C,CAAC;QAC5D,CAAC,MAAM;UACHd,KAAK,CAACc,KAAK,CAAC,4CAA4C,CAAC;QAC7D;MACJ,CAAC,SAAS;QACNL,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED,IAAIJ,EAAE,EAAE;MACJK,SAAS,CAAC,CAAC;IACf;EACJ,CAAC,EAAE,CAACL,EAAE,CAAC,CAAC;EAER,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAKgB,SAAS,EAAC,OAAO;IAAAC,QAAA,eAACjB,OAAA,CAACH,OAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC5D,IAAI,CAACjB,IAAI,EAAE,oBAAOJ,OAAA;IAAKgB,SAAS,EAAC,8BAA8B;IAAAC,QAAA,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAErF,oBACIrB,OAAA;IAAKgB,SAAS,EAAC,kDAAkD;IAAAC,QAAA,eAC7DjB,OAAA,CAACJ,QAAQ;MAACQ,IAAI,EAAEA,IAAK;MAACkB,WAAW,EAAEA,CAAA,KAAM,CAAE;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEd;AAACnB,EAAA,CAlCuBD,QAAQ;EAAA,QACbP,SAAS;AAAA;AAAA6B,EAAA,GADJtB,QAAQ;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}