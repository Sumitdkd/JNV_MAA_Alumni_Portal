{"ast":null,"code":"// Web Share API + Clipboard fallback utility\nexport async function shareLink(url, {\n  title = document.title,\n  text = ''\n} = {}) {\n  if (!url) return false;\n\n  //   console.log(\"Sharing URL:\", url);\n  //   console.log(\"Share title:\", title);\n  //   console.log(\"Share text:\", text);\n\n  // Check if Web Share API is available and can share\n  if (navigator.share) {\n    // console.log(\"Using Web Share API\");\n    try {\n      const shareData = {\n        title,\n        text,\n        url\n      };\n\n      // Check if the data can be shared\n      if (navigator.canShare && !navigator.canShare(shareData)) {\n        throw new Error(\"Data cannot be shared\");\n      }\n      await navigator.share(shareData);\n      return true;\n    } catch (error) {\n      console.error(\"Web Share API failed:\", error);\n\n      // If user cancels the share, don't fall back to clipboard\n      if (error.name === 'AbortError') {\n        return false;\n      }\n\n      // Fall back to clipboard for other errors\n      try {\n        await navigator.clipboard.writeText(url);\n        return 'copied';\n      } catch (clipboardError) {\n        console.error(\"Clipboard copy failed:\", clipboardError);\n        return false;\n      }\n    }\n  }\n\n  // Fallback to clipboard copy\n  try {\n    await navigator.clipboard.writeText(url);\n    return 'copied';\n  } catch (clipboardError) {\n    console.error(\"Clipboard copy failed:\", clipboardError);\n\n    // Last resort: manual copy for older browsers\n    try {\n      const textArea = document.createElement('textarea');\n      textArea.value = url;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return 'copied';\n    } catch (manualCopyError) {\n      console.error(\"Manual copy failed:\", manualCopyError);\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["shareLink","url","title","document","text","navigator","share","shareData","canShare","Error","error","console","name","clipboard","writeText","clipboardError","textArea","createElement","value","body","appendChild","select","execCommand","removeChild","manualCopyError"],"sources":["/Users/sumitdhaker/Desktop/JNV MAA/frontend/src/utils/shareLink.js"],"sourcesContent":["// Web Share API + Clipboard fallback utility\nexport async function shareLink(\n  url,\n  { title = document.title, text = '' } = {}\n) {\n  if (!url) return false;\n  \n//   console.log(\"Sharing URL:\", url);\n//   console.log(\"Share title:\", title);\n//   console.log(\"Share text:\", text);\n\n  // Check if Web Share API is available and can share\n  if (navigator.share) {\n    // console.log(\"Using Web Share API\");\n    try {\n      const shareData = { title, text, url };\n      \n      // Check if the data can be shared\n      if (navigator.canShare && !navigator.canShare(shareData)) {\n        throw new Error(\"Data cannot be shared\");\n      }\n      \n      await navigator.share(shareData);\n      return true;\n    } catch (error) {\n      console.error(\"Web Share API failed:\", error);\n      \n      // If user cancels the share, don't fall back to clipboard\n      if (error.name === 'AbortError') {\n        return false;\n      }\n      \n      // Fall back to clipboard for other errors\n      try {\n        await navigator.clipboard.writeText(url);\n        return 'copied';\n      } catch (clipboardError) {\n        console.error(\"Clipboard copy failed:\", clipboardError);\n        return false;\n      }\n    }\n  }\n\n  // Fallback to clipboard copy\n  try {\n    await navigator.clipboard.writeText(url);\n    return 'copied';\n  } catch (clipboardError) {\n    console.error(\"Clipboard copy failed:\", clipboardError);\n    \n    // Last resort: manual copy for older browsers\n    try {\n      const textArea = document.createElement('textarea');\n      textArea.value = url;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return 'copied';\n    } catch (manualCopyError) {\n      console.error(\"Manual copy failed:\", manualCopyError);\n      return false;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,SAASA,CAC7BC,GAAG,EACH;EAAEC,KAAK,GAAGC,QAAQ,CAACD,KAAK;EAAEE,IAAI,GAAG;AAAG,CAAC,GAAG,CAAC,CAAC,EAC1C;EACA,IAAI,CAACH,GAAG,EAAE,OAAO,KAAK;;EAExB;EACA;EACA;;EAEE;EACA,IAAII,SAAS,CAACC,KAAK,EAAE;IACnB;IACA,IAAI;MACF,MAAMC,SAAS,GAAG;QAAEL,KAAK;QAAEE,IAAI;QAAEH;MAAI,CAAC;;MAEtC;MACA,IAAII,SAAS,CAACG,QAAQ,IAAI,CAACH,SAAS,CAACG,QAAQ,CAACD,SAAS,CAAC,EAAE;QACxD,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMJ,SAAS,CAACC,KAAK,CAACC,SAAS,CAAC;MAChC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;MAE7C;MACA,IAAIA,KAAK,CAACE,IAAI,KAAK,YAAY,EAAE;QAC/B,OAAO,KAAK;MACd;;MAEA;MACA,IAAI;QACF,MAAMP,SAAS,CAACQ,SAAS,CAACC,SAAS,CAACb,GAAG,CAAC;QACxC,OAAO,QAAQ;MACjB,CAAC,CAAC,OAAOc,cAAc,EAAE;QACvBJ,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEK,cAAc,CAAC;QACvD,OAAO,KAAK;MACd;IACF;EACF;;EAEA;EACA,IAAI;IACF,MAAMV,SAAS,CAACQ,SAAS,CAACC,SAAS,CAACb,GAAG,CAAC;IACxC,OAAO,QAAQ;EACjB,CAAC,CAAC,OAAOc,cAAc,EAAE;IACvBJ,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEK,cAAc,CAAC;;IAEvD;IACA,IAAI;MACF,MAAMC,QAAQ,GAAGb,QAAQ,CAACc,aAAa,CAAC,UAAU,CAAC;MACnDD,QAAQ,CAACE,KAAK,GAAGjB,GAAG;MACpBE,QAAQ,CAACgB,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAC;MACnCA,QAAQ,CAACK,MAAM,CAAC,CAAC;MACjBlB,QAAQ,CAACmB,WAAW,CAAC,MAAM,CAAC;MAC5BnB,QAAQ,CAACgB,IAAI,CAACI,WAAW,CAACP,QAAQ,CAAC;MACnC,OAAO,QAAQ;IACjB,CAAC,CAAC,OAAOQ,eAAe,EAAE;MACxBb,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEc,eAAe,CAAC;MACrD,OAAO,KAAK;IACd;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}