{"ast":null,"code":"var _jsxFileName = \"/Users/sumitdhaker/Desktop/JNV MAA/frontend/src/context/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport useAuth from '../hooks/useAuth';\nimport { useSocket } from './SocketContext';\nimport notificationService from '../services/notificationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const socket = useSocket();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchNotifications = useCallback(async () => {\n    if (user) {\n      try {\n        setLoading(true);\n        setError(null);\n        const res = await notificationService.getNotifications();\n        setNotifications(res.data.data);\n        setUnreadCount(res.data.data.filter(n => !n.read).length);\n      } catch (error) {\n        console.error(\"Failed to fetch notifications:\", error);\n        setError(\"Failed to load notifications. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n  }, [user]);\n  useEffect(() => {\n    fetchNotifications();\n  }, [fetchNotifications]);\n  useEffect(() => {\n    if (socket) {\n      const handleNewNotification = newNotification => {\n        setNotifications(prev => [newNotification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n      };\n      const handleSocketError = error => {\n        console.error('Socket error:', error);\n        setError(\"Connection lost. Notifications may not be real-time.\");\n      };\n      const handleSocketReconnect = () => {\n        console.log('Socket reconnected, refreshing notifications...');\n        setError(null);\n        fetchNotifications();\n      };\n      socket.on('new_notification', handleNewNotification);\n      socket.on('connect_error', handleSocketError);\n      socket.on('reconnect', handleSocketReconnect);\n      return () => {\n        socket.off('new_notification', handleNewNotification);\n        socket.off('connect_error', handleSocketError);\n        socket.off('reconnect', handleSocketReconnect);\n      };\n    }\n  }, [socket, fetchNotifications]);\n  const markAllAsRead = async () => {\n    if (unreadCount === 0) return;\n    try {\n      await notificationService.markAsRead();\n      setNotifications(notifications.map(n => ({\n        ...n,\n        read: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Failed to mark notifications as read:\", error);\n      // Don't update state if the API call failed\n    }\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    error,\n    markAllAsRead,\n    refreshNotifications: fetchNotifications,\n    clearError: () => setError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 12\n  }, this);\n};\n_s2(NotificationProvider, \"4xgia/MekSe7L2fCRQgRXXJsOuE=\", false, function () {\n  return [useAuth, useSocket];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useAuth","useSocket","notificationService","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","user","socket","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","error","setError","fetchNotifications","res","getNotifications","data","filter","n","read","length","console","handleNewNotification","newNotification","prev","handleSocketError","handleSocketReconnect","log","on","off","markAllAsRead","markAsRead","map","value","refreshNotifications","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sumitdhaker/Desktop/JNV MAA/frontend/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport useAuth from '../hooks/useAuth';\nimport { useSocket } from './SocketContext';\nimport notificationService from '../services/notificationService';\n\nconst NotificationContext = createContext();\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n    const { user } = useAuth();\n    const socket = useSocket();\n    const [notifications, setNotifications] = useState([]);\n    const [unreadCount, setUnreadCount] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchNotifications = useCallback(async () => {\n        if (user) {\n            try {\n                setLoading(true);\n                setError(null);\n                const res = await notificationService.getNotifications();\n                setNotifications(res.data.data);\n                setUnreadCount(res.data.data.filter(n => !n.read).length);\n            } catch (error) { \n                console.error(\"Failed to fetch notifications:\", error);\n                setError(\"Failed to load notifications. Please try again.\");\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [user]);\n\n    useEffect(() => { fetchNotifications(); }, [fetchNotifications]);\n\n    useEffect(() => {\n        if (socket) {\n            const handleNewNotification = (newNotification) => {\n                setNotifications(prev => [newNotification, ...prev]);\n                setUnreadCount(prev => prev + 1);\n            };\n\n            const handleSocketError = (error) => {\n                console.error('Socket error:', error);\n                setError(\"Connection lost. Notifications may not be real-time.\");\n            };\n\n            const handleSocketReconnect = () => {\n                console.log('Socket reconnected, refreshing notifications...');\n                setError(null);\n                fetchNotifications();\n            };\n\n            socket.on('new_notification', handleNewNotification);\n            socket.on('connect_error', handleSocketError);\n            socket.on('reconnect', handleSocketReconnect);\n\n            return () => {\n                socket.off('new_notification', handleNewNotification);\n                socket.off('connect_error', handleSocketError);\n                socket.off('reconnect', handleSocketReconnect);\n            };\n        }\n    }, [socket, fetchNotifications]);\n\n    const markAllAsRead = async () => {\n        if (unreadCount === 0) return;\n        try {\n            await notificationService.markAsRead();\n            setNotifications(notifications.map(n => ({ ...n, read: true })));\n            setUnreadCount(0);\n        } catch (error) { \n            console.error(\"Failed to mark notifications as read:\", error);\n            // Don't update state if the API call failed\n        }\n    };\n\n    const value = { \n        notifications, \n        unreadCount, \n        loading, \n        error, \n        markAllAsRead, \n        refreshNotifications: fetchNotifications,\n        clearError: () => setError(null)\n    };\n    return <NotificationContext.Provider value={value}>{children}</NotificationContext.Provider>;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}